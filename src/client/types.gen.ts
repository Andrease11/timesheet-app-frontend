// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginTokenAuthTokenPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ListGeminiInput = {
    images: Array<string>;
};

export type ShiftCreateModel = {
    entry_date: string;
    exit_date?: string | null;
};

export type ShiftModel = {
    id: string;
    entry_date: string;
    exit_date?: string | null;
};

export type ShiftOutputModel = {
    id: string;
    entry_date: string;
    exit_date: string | null;
    duration: number | null;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type UserLogin = {
    email: string;
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type RegisterUserUsersRegistrationPostData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/users/registration';
};

export type RegisterUserUsersRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserUsersRegistrationPostError = RegisterUserUsersRegistrationPostErrors[keyof RegisterUserUsersRegistrationPostErrors];

export type RegisterUserUsersRegistrationPostResponses = {
    /**
     * Successful Response
     */
    201: unknown;
};

export type ReadUserMeUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type ReadUserMeUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserLogin;
};

export type ReadUserMeUsersMeGetResponse = ReadUserMeUsersMeGetResponses[keyof ReadUserMeUsersMeGetResponses];

export type ImagesGeminiAnalyzeImagesPostData = {
    body: ListGeminiInput;
    path?: never;
    query?: never;
    url: '/gemini/analyze_images';
};

export type ImagesGeminiAnalyzeImagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImagesGeminiAnalyzeImagesPostError = ImagesGeminiAnalyzeImagesPostErrors[keyof ImagesGeminiAnalyzeImagesPostErrors];

export type ImagesGeminiAnalyzeImagesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginTokenAuthTokenPostData = {
    body: BodyLoginTokenAuthTokenPost;
    path?: never;
    query?: never;
    url: '/auth/token';
};

export type LoginTokenAuthTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginTokenAuthTokenPostError = LoginTokenAuthTokenPostErrors[keyof LoginTokenAuthTokenPostErrors];

export type LoginTokenAuthTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginTokenAuthTokenPostResponse = LoginTokenAuthTokenPostResponses[keyof LoginTokenAuthTokenPostResponses];

export type GetShiftsShiftGetMoreGetData = {
    body?: never;
    path?: never;
    query: {
        start_date: string;
        end_date: string;
    };
    url: '/shift/get_more';
};

export type GetShiftsShiftGetMoreGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetShiftsShiftGetMoreGetError = GetShiftsShiftGetMoreGetErrors[keyof GetShiftsShiftGetMoreGetErrors];

export type GetShiftsShiftGetMoreGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ShiftOutputModel> | null;
};

export type GetShiftsShiftGetMoreGetResponse = GetShiftsShiftGetMoreGetResponses[keyof GetShiftsShiftGetMoreGetResponses];

export type GetShiftShiftGetGetData = {
    body?: never;
    path?: never;
    query: {
        id: string;
    };
    url: '/shift/get';
};

export type GetShiftShiftGetGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetShiftShiftGetGetError = GetShiftShiftGetGetErrors[keyof GetShiftShiftGetGetErrors];

export type GetShiftShiftGetGetResponses = {
    /**
     * Successful Response
     */
    200: ShiftOutputModel | null;
};

export type GetShiftShiftGetGetResponse = GetShiftShiftGetGetResponses[keyof GetShiftShiftGetGetResponses];

export type InsertShiftShiftInsertPostData = {
    body: ShiftCreateModel;
    path?: never;
    query?: never;
    url: '/shift/insert';
};

export type InsertShiftShiftInsertPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InsertShiftShiftInsertPostError = InsertShiftShiftInsertPostErrors[keyof InsertShiftShiftInsertPostErrors];

export type InsertShiftShiftInsertPostResponses = {
    /**
     * Successful Response
     */
    200: ShiftOutputModel;
};

export type InsertShiftShiftInsertPostResponse = InsertShiftShiftInsertPostResponses[keyof InsertShiftShiftInsertPostResponses];

export type RemoveShiftShiftDeleteDeleteData = {
    body?: never;
    path?: never;
    query: {
        shift_id: string;
    };
    url: '/shift/delete';
};

export type RemoveShiftShiftDeleteDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveShiftShiftDeleteDeleteError = RemoveShiftShiftDeleteDeleteErrors[keyof RemoveShiftShiftDeleteDeleteErrors];

export type RemoveShiftShiftDeleteDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateShiftShiftUpdatePutData = {
    body: ShiftModel;
    path?: never;
    query?: never;
    url: '/shift/update';
};

export type UpdateShiftShiftUpdatePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateShiftShiftUpdatePutError = UpdateShiftShiftUpdatePutErrors[keyof UpdateShiftShiftUpdatePutErrors];

export type UpdateShiftShiftUpdatePutResponses = {
    /**
     * Successful Response
     */
    200: ShiftOutputModel;
};

export type UpdateShiftShiftUpdatePutResponse = UpdateShiftShiftUpdatePutResponses[keyof UpdateShiftShiftUpdatePutResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};