// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { RegisterUserUsersRegistrationPostData, RegisterUserUsersRegistrationPostError, LoginForAccessTokenUsersTokenPostData, LoginForAccessTokenUsersTokenPostResponse, LoginForAccessTokenUsersTokenPostError, ReadUserMeUsersMeGetData, ReadUserMeUsersMeGetResponse, PingUsersPingGetData, PingUsersPingGetResponse, AnalyzeImageGeminiAnalyzeImagePostData, AnalyzeImageGeminiAnalyzeImagePostResponse, AnalyzeImageGeminiAnalyzeImagePostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register User
 */
export const registerUserUsersRegistrationPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserUsersRegistrationPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RegisterUserUsersRegistrationPostError, ThrowOnError>({
        url: '/users/registration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenUsersTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenUsersTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginForAccessTokenUsersTokenPostResponse, LoginForAccessTokenUsersTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/users/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Read User Me
 */
export const readUserMeUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUserMeUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUserMeUsersMeGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Ping
 */
export const pingUsersPingGet = <ThrowOnError extends boolean = false>(options?: Options<PingUsersPingGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingUsersPingGetResponse, unknown, ThrowOnError>({
        url: '/users/ping',
        ...options
    });
};

/**
 * Analyze Image
 */
export const analyzeImageGeminiAnalyzeImagePost = <ThrowOnError extends boolean = false>(options: Options<AnalyzeImageGeminiAnalyzeImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnalyzeImageGeminiAnalyzeImagePostResponse, AnalyzeImageGeminiAnalyzeImagePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/gemini/analyze_image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};